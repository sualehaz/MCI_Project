//motor A on rhs
const int enA = 7;   // ENABLE pin (PB4) for motor A PWM 
const int in1 = 4;   // IN1 pin (PB1) for motor A direction
const int in2 = 3;   // IN2 pin (PB0) for motor A direction

//motor B on lhs
const int enB = 37;    // ENABLE pin (PC4) for motor B PWM 
const int in3 = 35;    // IN3 pin (PC6) for motor B direction
const int in4 = 34;    // IN4 pin (PC7) for motor B direction

//Time Update Variables for the front ultrasonic
long duration_front, cm_front; //To measure pulse width and distance in cm
long distance_front = 0; //To return distance of object

//Time Update Variables for the left ultrasonic
long duration_left, cm_left; //To measure pulse width and distance in cm
long distance_left = 0; //To return distance of object

//Time Update Variables for the right ultrasonic
long duration_right, cm_right; //To measure pulse width and distance in cm
long distance_right = 0; //To return distance of object

////////////////////////////////////////////////////
//Initializing Pins Function
const int echo_front = 13; //PA4
const int echo_left = 8; //PA5
const int echo_right = 28; //PE2

// initializing the trig pins for Hc-SR04
const int trig_front = 12; //PA3
const int trig_left = 9; //PA6
const int trig_right = 29; //PE3

void setup() {
  Serial.begin(9600); // serial initialization 
  
  //pin modes for motor A
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);

  //pin modes for motor B
  pinMode(enB, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);


  // initially motors are off
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);

//setting the pins for the front ultrasonic
pinMode(trig_front, OUTPUT); 
pinMode(echo_front, INPUT); 

//setting the pins for the left ultrasonic
pinMode(trig_left, OUTPUT); 
pinMode(echo_left, INPUT); 

//setting the pins for the right ultrasonic
pinMode(trig_right, OUTPUT); 
pinMode(echo_right, INPUT); 
}


//Will update the ultrasonic sensor through Serial port
//for the front sensor
void Update_Front_Ultra_Sonic()
{
//Setting Trig Signal HIGH for 10us to produce burst of 8 pulses at 40KHz
digitalWrite(trig_front, LOW);
delayMicroseconds(2);
digitalWrite(trig_front, HIGH);
delayMicroseconds(10);
digitalWrite(trig_front, LOW);
duration_front = pulseIn(echo_front, HIGH); 
cm_front = microsecondsToCentimeters_front(duration_front); // convert the time into a distance, refer to function below
//Sending through serial port to print on Monitor
Serial.print("Distance at front=");
Serial.print("\t");
Serial.print(cm_front);
Serial.print("\n");
}

//for the left sensor
void Update_Left_Ultra_Sonic()
{
//Setting Trig Signal HIGH for 10us to produce burst of 8 pulses at 40KHz
digitalWrite(trig_left, LOW);
delayMicroseconds(2);
digitalWrite(trig_left, HIGH);
delayMicroseconds(10);
digitalWrite(trig_left, LOW);
duration_left = pulseIn(echo_left, HIGH); 
cm_left = microsecondsToCentimeters_left(duration_left); // convert the time into a distance, refer to function below
//Sending through serial port to print on Monitor
Serial.print("Distance at left=");
Serial.print("\t");
Serial.print(cm_left);
Serial.print("\n");
}

//for the right sensor
void Update_Right_Ultra_Sonic()
{
//Setting Trig Signal HIGH for 10us to produce burst of 8 pulses at 40KHz
digitalWrite(trig_right, LOW);
delayMicroseconds(2);
digitalWrite(trig_right, HIGH);
delayMicroseconds(10);
digitalWrite(trig_right, LOW);
duration_right = pulseIn(echo_right, HIGH); 
cm_right = microsecondsToCentimeters_right(duration_right); // convert the time into a distance, refer to function below
//Sending through serial port to print on Monitor
Serial.print("Distance at right=");
Serial.print("\t");
Serial.print(cm_right);
Serial.print("\n");
}


//Conversion of microsecond to centimeter
//for the distance read from the front sensor
long microsecondsToCentimeters_front(long microseconds_front)
{
distance_front = 0.034 * microseconds_front;
return distance_front / 2;
}

//for the distance read from the left sensor
long microsecondsToCentimeters_left(long microseconds_left)
{
distance_left = 0.034 * microseconds_left;
return distance_left / 2;
}

//for the distance read from the right sensor
long microsecondsToCentimeters_right(long microseconds_right)
{
distance_right = 0.034 * microseconds_right;
return distance_right / 2;
}
////////////////////////////////////////////////////
//Conversion of microsecond to centimeter

void right_turn(){
    digitalWrite(in1, LOW); // motor a stops
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);  //motor b moves forward
    digitalWrite(in4, HIGH);
    
    analogWrite(enA, 0);   //zero speed for motor a
    analogWrite(enB, 155);  // high speed for motor b
}

void left_turn(){
    digitalWrite(in1, LOW); // motor a moves forward
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);  //motor b stops
    digitalWrite(in4, LOW);
    
    analogWrite(enA, 155);   //high speed for motor a
    analogWrite(enB, 0);  // low speed for motor b
}

void straight_line(){
    digitalWrite(in2, HIGH); // motor a moves forward
    digitalWrite(in1, LOW);
    digitalWrite(in4, HIGH); // motor b moves forward
    digitalWrite(in3, LOW);
    
    analogWrite(enA, 110);  // high speed for motor a, 255
    analogWrite(enB, 90);  // high speed for motor b, 115
    
}

void stop(){
    digitalWrite(in2, LOW); // motor a moves forward
    digitalWrite(in1, LOW);
    digitalWrite(in4, LOW); // motor b moves forward
    digitalWrite(in3, LOW);
    
    analogWrite(enA, 0);  // high speed for motor a
    analogWrite(enB, 0);  // high speed for motor b, 117 or 125
    
  
}

void bluetooth(char command){
  if (command=='r'){
    right_turn();
    delay(220);
  }

  else if (command=='l'){
    left_turn();
    delay(220);
  }
  else if (command=='s'){
    stop();
    delay(3000);
    
  }
}
void loop() {

   if (Serial.available() > 0) {
   int commandDetect = Serial.read(); //read input from phone
   char comm = char(commandDetect);
   if (comm != '0') {
   Serial.println(comm); // Debug print
   }
   bluetooth(comm);
   }
  
  
 
  straight_line();

  Update_Front_Ultra_Sonic(); //This function operates the front HC-SR04
  Update_Left_Ultra_Sonic(); //This function operates the left HC-SR04
  Update_Right_Ultra_Sonic(); //This function operates the right HC-SR04

  

  
  if(cm_front<16){
    
    stop();
    delay(100);
    left_turn();
    delay(400); //for a slight shift
    straight_line();
      
  }


  else if(cm_right<7){
    
    left_turn();
    delay(100);
    
   
  }
 

  else if(cm_left<7){
   
    right_turn();
    delay(100);
   
   
  }
 
 

}
